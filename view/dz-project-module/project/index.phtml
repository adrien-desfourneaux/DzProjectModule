<?php

/**
 * Vue pour l'action ProjectController::indexAction()
 * Affiche les informations du module.
 *
 * PHP version 5
 *
 * @category   Source
 * @package    DzProjectModule
 * @subpackage View
 * @author     Adrien Desfourneaux (aka Dieze) <dieze51@gmail.com>
 * @license    http://opensource.org/licenses/GPL-2.0 GNU General Public License, version 2
 * @link       https://github.com/dieze/DzProjectModule/blob/master/view/dz-project-module/project/index.phtml
 */

?>

<h1>DzProjectModule</h1>

<p>DzProjectModule est un module de gestion de projet pour ZF2, compatible Doctrine. Il est écrit et maintenu par Adrien Desfourneaux (aka Dieze) &lt;dieze51@gmail.com&gt;. Le projet est hébergé par GitHub à l'adresse <a href="https://github.com/dieze/DzProjectModule.git">https://github.com/dieze/DzProjectModule.git</a></p>

<h2>Fonctionnalités</h2>

Le module gère :
<ul>
    <li><a href="<?php echo $this->url('dzproject/add'); ?>">l'ajout de projet (/project/add)</a></li>
    <li>La suppression de projet (/project/delete/:id)</li>
    <li><a href="<?php echo $this->url('dzproject/list'); ?>">le listing de tous les projets (/project/list)</a></li>
    <li><a href="<?php echo $this->url('dzproject/list', array('type' => 'active')); ?>">le listing des projets actifs (/project/list/active)</a>. Un projet est actif quand la date du jour se situe entre la date de début et la date de fin du projet.</li>
</ul>

<p>L'aide de vue <em>DzProjectModuleListWidget</em> permet d'intégrer le listing de tous les projets, ou des projets actifs, à un template de vue existant. Aussi, l' option <em>hasTitle</em> permet ou non d'afficher le titre. Les options <em>hasAddAction</em> et <em>hasDeleteAction</em> permettent d'afficher ou non respectivement les boutons d'ajout et de suppression de projets.</p>

<style>
    .widget-examples {
        list-style-type: none;
    }

    .widget-examples > li {
        display: inline-block;
        vertical-align: top;
        border: 1px solid black;
        border-radius: 0 0 5px 5px;
    }

    .widget-container {
        padding: 10px;
    }
</style>

<ul class="widget-examples">
    <li><pre>&lt;?php
echo $this->dzProjectListWidget();
?&gt;</pre>
        <div class="widget-container">
            <?php echo $this->dzProjectListWidget(); ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectListWidget(
    array(
        'type' => 'active'
    )
);
?&gt;</pre>
        <div class="widget-container">
            <?php echo $this->dzProjectListWidget(array('type' => 'active')); ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectListWidget(
    array(
        'hasTitle' => false
    )
);
?&gt;</pre>
        <div class="widget-container">
            <?php echo $this->dzProjectListWidget(array('hasTitle' => false)); ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectListWidget(
    array(
        'hasDeleteAction' => false
    )
);
?&gt;</pre>
        <div class="widget-container">
            <?php echo $this->dzProjectListWidget(array('hasDeleteAction' => false)); ?>
        </div>
    </li>
</ul>

<p>Il est possible d'ajouter, de modifier et de supprimer les valeurs des entêtes et contenus du listing des projets <em>dzproject/list</em> en ajoutant un listener à l'évènement init du DzProjectModule\View\ListFields dans le bootstrap de votre module. Le code suivant ajoute un champ Chef de projet pour chaque projet affiché dans le listing</p>

<pre>public function onBootstrap(EventInterface $e)
{
    $serviceManager = $e->getApplication()->getServiceManager();
    $events = $e->getApplication()->getEventManager()->getSharedManager();

    // Modification des champs du listing projets (dzproject/list)
    $events->attach('DzProjectModule\Controller\ProjectController', 'initListFields', function ($e) {
        $projectController = $e->getTarget();
        $listFields = $projectController->getListFields();
        $projects = $e->getParam('projects');

        // Ajouter le champ "Chef de projet"
        $projectManagerField = array('heading' => 'Chef de projet');
        foreach ($projects as $p) {
            $projectManagerField['values'][$p['project_id']] = $p['user']['display_name'];
        }

        // Le mettre en 2ème place (l'index commence à 0)
        array_splice($listFields, 1, 0, array($projectManagerField));

        // Renvoyer les champs modifiés à la target
        $projectController->setListFields($listFields);
    });
}</pre>

<p>L'aide de vue <em>DzProjectModuleAddWidget</em> permet d'intégrer l'affichage du formulaire d'ajout de projet à un template de vue existant. Les options <em>redirectSuccess</em> et <em>redirectFailure</em> définissent respectivement l'url de redirection en cas de succès ou d'échec. L'option <em>hasTitle</em> permet d'afficher ou non le titre. Aussi, l'option <em>hasSubmit</em> permet d'afficher ou non le bouton d'envoi du formulaire. Cela peut-être utile si l'on veut mettre le widget dans une fenêtre Modal Bootstrap, avec un bouton en footer de la fenêtre qui activera le submit.</p>

<ul class="widget-examples">
    <li>
        <pre>&lt;?php
echo $this->dzProjectAddWidget();
?&gt;</pre>
        <div class="widget-container">
            <?php echo $this->dzProjectAddWidget(); ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectAddWidget(
    array(
        'redirectSuccess' => $this->url(),
        'redirectFailure' => $this->url()
    )
);
?&gt;</pre>
        <div class="widget-container">
            <?php
            echo $this->dzProjectAddWidget(
                array(
                    'redirectSuccess' => $this->url(),
                    'redirectFailure' => $this->url(),
                )
            );
            ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectAddWidget(
    array(
        'hasTitle' => false
    )
);
?&gt;</pre>
        <div class="widget-container">
            <?php
            echo $this->dzProjectAddWidget(
                array(
                    'hasTitle' => false
                )
            );
            ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectAddWidget(
    array(
        'hasSubmit' => false
    )
);
?&gt;</pre>
        <div class="widget-container">
            <?php
            echo $this->dzProjectAddWidget(
                array(
                    'hasSubmit' => false
                )
            );
            ?>
        </div>
    </li>
</ul>

<p>L'aide de vue <em>DzProjectModuleDeleteWidget</em> permet d'intégrer l'affichage du formulaire de suppression d'un projet à un template de vue existant, avec la possibilité de mettre en place une redirection. Aussi, les options <em>hasTitle</em> et <em>hasSubmit</em> permettent d'afficher ou non respectivement le titre et le bouton d'envoi du formulaire.</p>

<ul class="widget-examples">
    <li>
        <pre>&lt;?php
echo $this->dzProjectDeleteWidget(1); // Id Projet 1
?&gt;</pre>
        <div class="widget-container">
            <?php echo $this->dzProjectDeleteWidget(1); ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectDeleteWidget(2,
    array(
        'redirect' => $this->url()
    )
);
?&gt;</pre>
        <div class="widget-container">
        <?php echo $this->dzProjectDeleteWidget(2, array('redirect' => $this->url())); ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectDeleteWidget(2,
    array(
        'hasTitle' => false
    )
);
?&gt;</pre>
        <div class="widget-container">
            <?php echo $this->dzProjectDeleteWidget(2, array('hasTitle' => false)); ?>
        </div>
    </li>
    <li>
        <pre>&lt;?php
echo $this->dzProjectDeleteWidget(2,
    array(
        'hasSubmit' => false
    )
);
?&gt;</pre>
        <div class="widget-container">
            <?php echo $this->dzProjectDeleteWidget(2, array('hasSubmit' => false)); ?>
        </div>
    </li>
</ul>

<p>Il est possible de tester manuellement les fonctionnalités du module, indépendamment du reste de l'application, en copiant le fichier <em>DzProjectModule/dzproject.php</em> dans le dossier <em>public</em> de l'application ZF2 puis en se rendant à l'url <em>http://le-nom-de-votre-domaine/dzproject.php/project</em>.</p>

<h2>Base de données</h2>

<p>Le module DzProjectModule possède sa propre base de données de développement dans le fichier de base de données sqlite <em>DzProjectModule/data/dzproject.sqlite</em>. Les fichiers <em>dzproject.sqlite.sql</em> et <em>dzproject.dump.sqlite.sql</em> contiennent respectivement les instructions de création et d'insertion de données de tests dans le base de données.</p>

<p>Le script shell <em>DzProjectModule/db.sh</em> permet la gestion de cette base de données. Lancer la commande <pre>./db.sh help</pre> pour accéder à l'aide intégrée.

<h2>Qualité du code</h2>

<p>Le script shell <b>DzProjectModule/qa.sh</b> permet de vérifier la qualité du code, lancer les tests, vérifier et générer la documentation du code. Lancer la commande <pre>./qa.sh help</pre> pour accéder à l'aide intégrée.</p>

Les outils de qualité de code mis en oeuvres sont :
<ul>
    <li><a href="https://github.com/phpDocumentor/phpDocumentor2">phpDocumentor</a> pour la documentation du code</li>
    <li><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a> pour le respect du standard de codage PEAR</li>
    <li><a href="https://github.com/phpmd/phpmd">PHPMD</a> pour la détection d'éventuels problèmes de conception</li>
    <li><a href="http://pdepend.org/">PDepend</a> pour la génération de diagrammes de dépendances</li>
    <li><a href="https://github.com/sebastianbergmann/phploc">PHPLoc</a> pour la génération de statistiques sur le code</li>
    <li><a href="https://github.com/sebastianbergmann/phpcpd">PHPCPD</a> pour la détection des copier-coller</li>
</ul>

<h2>Tests</h2>

<p>Des tests d'acceptation du module DzProjectModule se situent dans le dossier DzProjectModule/tests/acceptance. Ces tests utilisent la suite de test <a href="http://codeception.com/">Codeception</a>, avec le module <a href="http://codeception.com/docs/modules/WebDriver">WebDriver</a> pour piloter un navigateur web grâce à <a href="http://docs.seleniumhq.org/">Selenium</a>.</p>

<p>Afin que ces tests fonctionnent, copier le fichier <em>DzProjectModule/dzproject.test.php</em> dans le dossier public de l'application ZF2, puis éditer le fichier <em>DzProjectModule/tests/acceptance.suite.yml</em> et modifier la ligne url en spécifiant l'ip de la machine où se situe votre application. Modifier également la ligne host en y spécifiant l'ip de la machine où se trouvera le serveur Selenium. Enfin lancer le serveur Selenium : <pre>java -jar DzProjectModule/tests/selenium-server-standalone-2.39.0.jar</pre>Installer la dernière version de Firefox sur la machine où est lancé le serveur Selenium.</p>

<p>Vous pouvez maintenant lancer les tests d'acceptation.
Pour lancer un test d'acceptation (ListAllProjectsCept par exemple), aller dans le répertoire du module et lancer la commande : <pre>../../vendor/bin/codecept run tests/acceptance/ListAllProjectsCept.php</pre> Vous pouvez également lancer tous les tests d'acceptation avec la commande : <pre>../../vendor/bin/codecept run</pre> Il est aussi possible d'utiliser le script shell qui va lancer tous les tests d'acceptation : <pre>./qa.sh test cept</pre></p>

<p>Des tests unitaires, sous la forme de spécifications, sont également disponibles dans le dossier DzProjectModule/spec. Ces tests utilisent la suite de test <a href="http://www.phpspec.net/">PHPSpec</a>. La commande <pre>./qa.sh test spec</pre> lancera l'exécution de ces tests.</p>
